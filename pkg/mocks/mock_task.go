// Code generated by MockGen. DO NOT EDIT.
// Source: tasks/task.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	tasks "github.com/ankursoni/kubernetes-operator-roiergasias/pkg/tasks"
	gomock "github.com/golang/mock/gomock"
)

// MockITasks is a mock of ITasks interface.
type MockITasks struct {
	ctrl     *gomock.Controller
	recorder *MockITasksMockRecorder
}

// MockITasksMockRecorder is the mock recorder for MockITasks.
type MockITasksMockRecorder struct {
	mock *MockITasks
}

// NewMockITasks creates a new mock instance.
func NewMockITasks(ctrl *gomock.Controller) *MockITasks {
	mock := &MockITasks{ctrl: ctrl}
	mock.recorder = &MockITasksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITasks) EXPECT() *MockITasksMockRecorder {
	return m.recorder
}

// NewTask mocks base method.
func (m *MockITasks) NewTask(arg0 string, arg1 map[string]interface{}, arg2 string) tasks.ITaskWorkflow {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTask", arg0, arg1, arg2)
	ret0, _ := ret[0].(tasks.ITaskWorkflow)
	return ret0
}

// NewTask indicates an expected call of NewTask.
func (mr *MockITasksMockRecorder) NewTask(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTask", reflect.TypeOf((*MockITasks)(nil).NewTask), arg0, arg1, arg2)
}

// MockITaskWorkflow is a mock of ITaskWorkflow interface.
type MockITaskWorkflow struct {
	ctrl     *gomock.Controller
	recorder *MockITaskWorkflowMockRecorder
}

// MockITaskWorkflowMockRecorder is the mock recorder for MockITaskWorkflow.
type MockITaskWorkflowMockRecorder struct {
	mock *MockITaskWorkflow
}

// NewMockITaskWorkflow creates a new mock instance.
func NewMockITaskWorkflow(ctrl *gomock.Controller) *MockITaskWorkflow {
	mock := &MockITaskWorkflow{ctrl: ctrl}
	mock.recorder = &MockITaskWorkflowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITaskWorkflow) EXPECT() *MockITaskWorkflowMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockITaskWorkflow) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockITaskWorkflowMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockITaskWorkflow)(nil).Run))
}
